{
  "struct": {
    "prefix": "struct",
    "description": "",
    "body": [
      "type $1 struct{}"
    ]
  },
  "fore": {
    "prefix": "fore",
    "description": "ForEach",
    "body": [
      "for i,v := range $1 {",
      "   $2 ",
      "}"
    ]
  },
  "makearr": {
    "prefix": "makearr",
    "description": "make a known length array",
    "body": [
      "$3arr := make([]*$1, len($2))"
    ]
  },
  "enum": {
    "prefix": "enum",
    "description": "",
    "body": [
      "type $1 uint8",
      "",
      "",
      "const (",
      "\t$2 $1 = iota",
      "\t$3",
      ")",
      ""
    ]
  },
  "test": {
    "prefix": "test",
    "description": "",
    "body": [
      "func Test$1(t *testing.T) {",
      "\tassert.Equal(t, true, false)",
      "}"
    ]
  },
  "lbl": {
    "prefix": "lbl",
    "description": "fyne label",
    "body": [
      "widget.NewLabel(\"$1\")"
    ]
  },
  "btn": {
    "prefix": "btn",
    "description": "fyne button",
    "body": [
      "widget.NewButton(\"$1\", func() {})"
    ]
  },
  "fbr": {
    "prefix": "fbr",
    "description": "Fluent Border",
    "body": [
      "NewFborder().Get($1)"
    ]
  },
  "tostring": {
    "prefix": "tostring",
    "description": "stringer interface",
    "body": [
      "func ($2 *$1) String() string {",
      "\treturn fmt.Sprintf(\"%s\", \"something\")",
      "}"
    ]
  },
  "met": {
    "prefix": "met",
    "description": "",
    "body": [
      "func (*$1) $2() {",
      "\t$3",
      "}"
    ]
  },
  "sprf": {
    "prefix": "sprf",
    "description": "fmt.Sprintf",
    "body": [
      "fmt.Sprintf(\"%s\", $1)"
    ]
  },
  "junmars": {
    "prefix": "junmars",
    "description": "json unmarshal",
    "body": [
      "if $1 == \"\" {",
      "\treturn $2{}",
      "}",
      "",
      "var result $2",
      "data := $1",
      "err := json.Unmarshal([]byte(data), &result)",
      "if err != nil {",
      "\tfmt.Println(\"error while loading\", err)",
      "\treturn $2{}",
      "}",
      "",
      "return result"
    ]
  },
  "jmarsh": {
    "prefix": "jmarsh",
    "description": "",
    "body": [
      "if $1 == nil {",
      "\treturn nil",
      "}",
      "",
      "var result string",
      "data, _ := json.Marshal($1)",
      "result = string(data)",
      "",
      "return &result"
    ]
  }
}